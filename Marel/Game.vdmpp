class Game
instance variables
	public board: [Board] := nil;
	--public currentPlayer: Player;
	public player1: Player; 
	public player2: Player;
	--public piecesB: set of Piece:= {};
	--public piecesR: set of Piece:= {};
	public gameState : nat1 := 1; -- o jogo tem 3 fases
	inv gameState in set {1, 2, 3};

operations
	--Construtor; 
	public Game:() ==> Game Game() == ( 
			board := new Board(); 
			player1 := new Player('B'); 
			player2 := new Player('R'); 
				
			--atribuir primeira fase;
			updateGameState();
	)post player1 <> player2;
	
	-- Verifica em que fase do jogo esta’ e actualiza-a
	public updateGameState : () ==> () updateGameState() == (
		if ( card {p | p in set elems (player1.pieces ^ player2.pieces) & p.pieceState = 0} > 0)
		then gameState := 1
		else gameState := 2
	);
	
	-- coloca a peca (de um jogador) cujo id e’ idPeca na celula idCelulaDestino
	-- na fase 1
	public putPiece : Player * nat1 * nat1 ==> () putPiece(player, idDestinyCell, idPiece) == (
		--tirar peca ao jogador
		board.putPiece(idDestinyCell, player.pieces(idPiece));
	)
		--peca tem de ser do bolso (nao pode jogar com pecas q foram eliminadas)
		pre player.pieces(idPiece).pieceState = 0
		--a cor da peca tem de ser do jogador respectivo
		and player.pieces(idPiece).color = player.id
		--celula nao pode estar ocupada
		and board.grafo_adj.Vertices(idDestinyCell).hasPiece = false
		-- jogo tem de estar na fase 1 (colocar pecas do bolso)
		and gameState = 1
		-- a celula destino tem de estar ocupada
		post board.grafo_adj.Vertices(idDestinyCell).hasPiece = true
		-- a celula destino tem de ter uma peca do jogador
		and board.grafo_adj.Vertices(idDestinyCell).piece.color = player.id;

	-- Remove a peca de um jogador numa determinada celula.
	public removePeca : (nat1) ==> () removePeca(idCelula) == (
		dcl celula : Cell := board.grafo_adj.Vertices(idCelula);
		--celula deixa de estar ocupada
		celula.hasPiece := false;
		--peca passa para estado apagada
		celula.piece.pieceState := -1;
		--peca passa a nil
		celula.piece := nil;
	)
		--celula tem de estar ocupada
		pre board.grafo_adj.Vertices(idCelula).hasPiece = true
		--celula tem de ter uma peca
		and board.grafo_adj.Vertices(idCelula).piece <> nil
		-- celula tem de ficar vazia
		post board.grafo_adj.Vertices(idCelula).piece = nil
		-- celula tem de ficar livre
		and board.grafo_adj.Vertices(idCelula).hasPiece = false;

	-- move a peca no tabuleiro na fase 2 do jogo, em que so’ se pode deslocar em
	-- celulas adjacentes e que estejam vazias
	public movePeca : Player * nat1 * nat1 ==> () movePeca(jogador, idCelulaDestino, idCelulaOrigem) == (
		dcl idPeca : nat1 := board.grafo_adj.Vertices(idCelulaOrigem).piece.id;
		dcl peca : Piece := jogador.pieces(idPeca);
		dcl celOri : Cell := board.grafo_adj.Vertices(idCelulaOrigem);
		dcl celDest : Cell := board.grafo_adj.Vertices(idCelulaDestino);
		celOri.piece := nil;
		celOri.hasPiece := false;
		celDest.piece := jogador.pieces(idPeca);
		celDest.hasPiece := true;
		celDest.piece := peca;
		celDest.piece.pieceState := 1;
	)
		--celula origem tem de estar ocupada
		--TODO a parte comentada está a dar erro no BoardTest.testMovePeca(): comentei para não dar erro
		pre board.grafo_adj.Vertices(idCelulaOrigem).hasPiece = true
		--peca do jogador tem de estar no tabuleiro
		--and board.grafo_adj.Vertices(idCelulaOrigem).piece.pieceState = 1
		--peca na celula origem tem de estar no tabuleiro (estado = 1)
		--and board.grafo_adj.Vertices(idCelulaOrigem).piece.pieceState = 1
		-- o jogador so pode mover as suas proprias pecas
		--and board.grafo_adj.Vertices(idCelulaOrigem).piece.color = jogador.id
		--jogador nao pode ter pecas no bolso
		--and card ({p | p in set elems jogador.pieces & p.pieceState = 0}) = 0
		and board.grafo_adj.Vertices(idCelulaDestino).hasPiece = false
		-- a celula destino tem de estar ocupada
		post board.grafo_adj.Vertices(idCelulaDestino).hasPiece = true
		-- celula origem tem de ficar vazia
		and board.grafo_adj.Vertices(idCelulaOrigem).hasPiece = false
		--peca do jogador ainda tem de estar no tabuleiro
		and board.grafo_adj.Vertices(idCelulaDestino).piece.pieceState = 1;
		
	-- Verifica se o jogador fez um mill (3 pecas suas em linha horizontal ou vertical)
	-- condicao em que remove uma peca do adversario a escolha
	public verificaMill : (nat1) ==> (bool) verificaMill(idx) == (
		-- celula para onde o jogador moveu a peca
		dcl cel : Cell := board.grafo_adj.Vertices(idx);
		-- mills possiveis com esta celula
		dcl mills : seq of nat1 := cel.cellMills;
		--cor da peca jogada
		dcl cor : char := board.grafo_adj.Vertices(idx).piece.color;
		dcl n : nat1 := len mills;
		for i = 1 to n by 1 do
		(
		if (board.grafo_adj.Vertices(mills(i)).hasPiece = true
		and board.grafo_adj.Vertices(mills(i+1)).hasPiece = true
		and board.grafo_adj.Vertices(mills(i)).piece.color = cor
		and board.grafo_adj.Vertices(mills(i+1)).piece.color = cor)
		then
			return true;
		);
		return false;
	)
		--tem de ser uma celula ocupada
		pre board.grafo_adj.Vertices(idx).hasPiece = true;
	
end Game